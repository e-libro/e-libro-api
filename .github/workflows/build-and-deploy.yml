name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GH_TOKEN }} | docker login ghcr.io -u e-libro --password-stdin

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/e-libro/e-libro-api:latest

      - name: Notify build success
        if: success()
        run: echo "Build succeeded!"

      - name: Notify build failure
        if: failure()
        run: echo "Build failed!"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        env:
          DB_URL: ${{ secrets.DB_URL }}
          PORT: ${{ secrets.PORT }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          ENCRYPTION_SECRET_KEY: ${{ secrets.ENCRYPTION_SECRET_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

        run: |
          set -e
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            echo ${{ secrets.GH_TOKEN }} | docker login ghcr.io -u e-libro --password-stdin

            # Stop and remove the existing container if it exists
            if docker ps -a --filter "name=e-libro-api" --format '{{.Names}}' | grep -w e-libro-api; then
              echo "Stopping and removing existing container..."
              docker rm -f e-libro-api
            fi

            # Remove the existing image if it exists
            if docker images -q ghcr.io/e-libro/e-libro-api:latest; then
              echo "Removing existing image..."
              docker rmi -f ghcr.io/e-libro/e-libro-api:latest
            fi

            # Pull the latest image
            echo "Pulling the latest image..."
            docker pull ghcr.io/e-libro/e-libro-api:latest

            # Create the environment file securely
            echo "Creating environment file..."
            echo "DB_URL=$DB_URL" > ~/.env.production.api
            echo "PORT=$PORT" >> ~/.env.production.api
            echo "CORS_ORIGIN=$CORS_ORIGIN" >> ~/.env.production.api
            echo "ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET" >> ~/.env.production.api
            echo "REFRESH_TOKEN_SECRET=$REFRESH_TOKEN_SECRET" >> ~/.env.production.api
            echo "ENCRYPTION_SECRET_KEY=$ENCRYPTION_SECRET_KEY" >> ~/.env.production.api
            chmod 600 ~/.env.production.api

            # Start the new container
            echo "Starting new container..."
            docker run -d --name e-libro-api --env-file ~/.env.production.api -p 8081:8081 ghcr.io/e-libro/e-libro-api
          EOF

      - name: Notify deployment success
        if: success()
        run: echo "Deployment succeeded!"

      - name: Notify deployment failure
        if: failure()
        run: echo "Deployment failed!"
